conformant = "Partial"
notes = """
Incorrectly evaluates generic alias with TypeVarTuple if no type arguments are supplied.
Incorrectly evaluates tuple split across a TypeVarTuple and a TypeVar.
"""
output = """
generics_typevartuple_specialization.py:95:17 - error: "assert_type" mismatch: expected "tuple[Any, *tuple[Any, ...]]" but received "tuple[Unknown, Unknown]" (reportGeneralTypeIssues)
generics_typevartuple_specialization.py:109:18 - error: Type variable "Ts" has no meaning in this context (reportGeneralTypeIssues)
generics_typevartuple_specialization.py:109:18 - error: Could not specialize type "IntTupleGeneric[T@IntTupleGeneric]"
  Unpacked arguments cannot be used in type argument lists
generics_typevartuple_specialization.py:110:18 - error: Could not specialize type "IntTupleGeneric[T@IntTupleGeneric]"
  Unpacked arguments cannot be used in type argument lists
generics_typevartuple_specialization.py:121:27 - error: Type argument list can have at most one unpacked TypeVarTuple or Tuple
generics_typevartuple_specialization.py:122:27 - error: Type argument list can have at most one unpacked TypeVarTuple or Tuple
generics_typevartuple_specialization.py:127:9 - error: Too few type arguments provided for "TA7[*Ts@TA7, T1@TA7, T2@TA7]"; expected 3 but received 2
generics_typevartuple_specialization.py:153:13 - error: Could not specialize type "TA9[*Ts@TA9, T1@TA9]"
  Unpacked arguments cannot be used in type argument lists
generics_typevartuple_specialization.py:157:17 - error: "assert_type" mismatch: expected "tuple[*tuple[int, ...], int]" but received "tuple[Unknown]" (reportGeneralTypeIssues)
generics_typevartuple_specialization.py:163:14 - error: Could not specialize type "TA11[T@TA11, *Ts1@TA11]"
  Unpacked arguments cannot be used in type argument lists
"""
