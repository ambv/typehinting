conformant = "Partial"
notes = """
Does not pick a winning overload based on arity, prior to considering argument types.
Does not expand boolean arguments to Literal[True] and Literal[False].
Does not expand enum arguments to literal variants.
Does not expand tuple arguments to possible combinations.
"""
conformance_automated = "Fail"
errors_diff = """
Line 36: Unexpected errors ['overloads_evaluation.py:36: error: Expression is of type "Any", not "int"  [assert-type]']
Line 42: Unexpected errors ['overloads_evaluation.py:42: error: Expression is of type "Any", not "str"  [assert-type]']
Line 103: Unexpected errors ['overloads_evaluation.py:103: error: No overload variant of "expand_bool" matches argument type "bool"  [call-overload]']
Line 104: Unexpected errors ['overloads_evaluation.py:104: error: Expression is of type "Any", not "Literal[0, 1]"  [assert-type]']
Line 126: Unexpected errors ['overloads_evaluation.py:126: error: No overload variant of "expand_enum" matches argument type "Color"  [call-overload]']
Line 127: Unexpected errors ['overloads_evaluation.py:127: error: Expression is of type "Any", not "Literal[0, 1]"  [assert-type]']
Line 147: Unexpected errors ['overloads_evaluation.py:147: error: Argument 1 to "expand_tuple" has incompatible type "tuple[int, int | str]"; expected "tuple[int, int]"  [arg-type]']
Line 148: Unexpected errors ['overloads_evaluation.py:148: error: Expression is of type "int", not "int | str"  [assert-type]']
"""
output = """
overloads_evaluation.py:27: error: All overload variants of "example1" require at least one argument  [call-overload]
overloads_evaluation.py:27: note: Possible overload variants:
overloads_evaluation.py:27: note:     def example1(x: int, y: str) -> int
overloads_evaluation.py:27: note:     def example1(x: str) -> str
overloads_evaluation.py:35: error: No overload variant of "example1" matches argument types "int", "int"  [call-overload]
overloads_evaluation.py:35: note: Possible overload variants:
overloads_evaluation.py:35: note:     def example1(x: int, y: str) -> int
overloads_evaluation.py:35: note:     def example1(x: str) -> str
overloads_evaluation.py:36: error: Expression is of type "Any", not "int"  [assert-type]
overloads_evaluation.py:41: error: No overload variant of "example1" matches argument type "int"  [call-overload]
overloads_evaluation.py:41: note: Possible overload variants:
overloads_evaluation.py:41: note:     def example1(x: int, y: str) -> int
overloads_evaluation.py:41: note:     def example1(x: str) -> str
overloads_evaluation.py:42: error: Expression is of type "Any", not "str"  [assert-type]
overloads_evaluation.py:86: error: Argument 1 to "example2" has incompatible type "int | str"; expected "int"  [arg-type]
overloads_evaluation.py:86: error: Argument 2 to "example2" has incompatible type "int | str"; expected "str"  [arg-type]
overloads_evaluation.py:103: error: No overload variant of "expand_bool" matches argument type "bool"  [call-overload]
overloads_evaluation.py:103: note: Possible overload variants:
overloads_evaluation.py:103: note:     def expand_bool(x: Literal[False]) -> Literal[0]
overloads_evaluation.py:103: note:     def expand_bool(x: Literal[True]) -> Literal[1]
overloads_evaluation.py:104: error: Expression is of type "Any", not "Literal[0, 1]"  [assert-type]
overloads_evaluation.py:126: error: No overload variant of "expand_enum" matches argument type "Color"  [call-overload]
overloads_evaluation.py:126: note: Possible overload variants:
overloads_evaluation.py:126: note:     def expand_enum(x: Literal[Color.RED]) -> Literal[0]
overloads_evaluation.py:126: note:     def expand_enum(x: Literal[Color.BLUE]) -> Literal[1]
overloads_evaluation.py:127: error: Expression is of type "Any", not "Literal[0, 1]"  [assert-type]
overloads_evaluation.py:147: error: Argument 1 to "expand_tuple" has incompatible type "tuple[int, int | str]"; expected "tuple[int, int]"  [arg-type]
overloads_evaluation.py:148: error: Expression is of type "int", not "int | str"  [assert-type]
"""
