conformant = "Partial"
notes = """
Incorrectly reports type incompatibility when generic class is specialized with `*tuple[Any, ...]`.
Does not reject specialization of TypeVar in generic type alias when unpacked tuple is specified as type argument.
Does not reject specialization of generic type alias when number of type arguments is too few.
Incorrectly evaluates tuple split across a TypeVarTuple and a TypeVar.
"""
output = """
generics_typevartuple_specialization.py:95:17 - error: "assert_type" mismatch: expected "tuple[Any, ...]" but received "tuple[Unknown, Unknown]" (reportGeneralTypeIssues)
generics_typevartuple_specialization.py:109:18 - error: Type variable "Ts" has no meaning in this context (reportGeneralTypeIssues)
generics_typevartuple_specialization.py:121:27 - error: Type argument list can have at most one unpacked TypeVarTuple or Tuple
generics_typevartuple_specialization.py:122:27 - error: Type argument list can have at most one unpacked TypeVarTuple or Tuple
generics_typevartuple_specialization.py:157:17 - error: "assert_type" mismatch: expected "tuple[*tuple[int, ...], int]" but received "tuple[*tuple[int, ...]]" (reportGeneralTypeIssues)
generics_typevartuple_specialization.py:159:17 - error: "assert_type" mismatch: expected "tuple[str, *tuple[int, ...], int]" but received "tuple[str, *tuple[int, ...]]" (reportGeneralTypeIssues)
generics_typevartuple_specialization.py:163:11 - error: Type variable "Ts2" has no meaning in this context (reportGeneralTypeIssues)
"""
